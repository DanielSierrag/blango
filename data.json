[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "What a great post!", "content_type": 8, "object_id": 1, "created_at": "2025-04-03T16:10:11.207Z", "modified_at": "2025-04-03T16:10:11.270Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "I like myself!", "content_type": 4, "object_id": 1, "created_at": "2025-04-03T16:10:11.207Z", "modified_at": "2025-04-03T16:10:11.270Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 2, "content": "commenting something", "content_type": 8, "object_id": 1, "created_at": "2025-04-04T21:49:10.800Z", "modified_at": "2025-04-04T21:49:10.800Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 2, "content": "comment rendering form with crispy tag", "content_type": 8, "object_id": 1, "created_at": "2025-04-05T01:31:01.382Z", "modified_at": "2025-04-05T01:31:01.382Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 2, "content": "some", "content_type": 8, "object_id": 2, "created_at": "2025-04-10T21:18:52.276Z", "modified_at": "2025-04-10T21:18:52.276Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 2, "content": "this is too much", "content_type": 8, "object_id": 3, "created_at": "2025-04-10T21:25:51.784Z", "modified_at": "2025-04-10T21:25:51.785Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "django"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "django"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2025-04-03T14:33:47.058Z", "modified_at": "2025-04-03T21:56:15.299Z", "published_at": "2025-04-03T21:55:20Z", "title": "learning django contenttypes", "slug": "learning_django_contenttypes", "summary": "bla bla bla", "content": "Here goes the post content", "tags": [2]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2025-04-04T00:41:20.680Z", "modified_at": "2025-04-04T00:41:20.680Z", "published_at": "2025-04-04T00:40:48Z", "title": "some test post", "slug": "some-test-post", "summary": "testing", "content": "Testing custom template filters", "tags": [2]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 1, "created_at": "2025-04-04T16:18:29.142Z", "modified_at": "2025-04-04T16:18:29.142Z", "published_at": "2025-04-04T16:16:29Z", "title": "Advanded Django: Learning how to create template tags", "slug": "advanded-django-learning-how-to-create-template-ta", "summary": "Custom template tags sometimes are better that custom filters as they're more powerfull and can perform more complex tasks", "content": "{% autoescape on %}\r\n    {{ body }}\r\n{% endautoescape %}\r\nWhen auto-escaping is in effect, all content derived from variables has HTML escaping applied before placing the result into the output (but after any filters are applied). This is equivalent to manually applying the escape filter to each variable.\r\n\r\nThe only exceptions are variables already marked as “safe” from escaping. Variables could be marked as “safe” by the code which populated the variable, by applying the safe or escape filters, or because it’s the result of a previous filter that marked the string as “safe”.\r\n\r\nWithin the scope of disabled auto-escaping, chaining filters, including escape, may cause unexpected (but documented) results such as the following:\r\n\r\n{% autoescape off %}\r\n    {{ my_list|join:\", \"|escape }}\r\n{% endautoescape %}\r\nThe above code will output the joined elements of my_list unescaped. This is because the filter chaining sequence executes first join on my_list (without applying escaping to each item since autoescape is off), marking the result as safe. Subsequently, this safe result will be fed to escape filter, which does not apply a second round of escaping.\r\n\r\nIn order to properly escape every element in a sequence, use the escapeseq filter:\r\n\r\n{% autoescape off %}\r\n    {{ my_list|escapeseq|join:\", \" }}\r\n{% endautoescape %}\r\nblock¶\r\nDefines a block that can be overridden by child templates. See Template inheritance for more information.\r\n\r\ncomment¶\r\nIgnores everything between {% comment %} and {% endcomment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.\r\n\r\nSample usage:\r\n\r\n<p>Rendered text with {{ pub_date|date:\"c\" }}</p>\r\n{% comment \"Optional note\" %}\r\n    <p>Commented out text with {{ create_date|date:\"c\" }}</p>\r\n{% endcomment %}\r\ncomment tags cannot be nested.\r\n\r\ncsrf_token¶\r\nThis tag is used for CSRF protection, as described in the documentation for Cross Site Request Forgeries.\r\n\r\ncycle¶\r\nProduces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again.\r\n\r\nThis tag is particularly useful in a loop:\r\n\r\n{% for o in some_list %}\r\n    <tr class=\"{% cycle 'row1' 'row2' %}\">\r\n        ...\r\n    </tr>\r\n{% endfor %}\r\nThe first iteration produces HTML that refers to class row1, the second to row2, the third to row1 again, and so on for each iteration of the loop.\r\n\r\nYou can use variables, too. For example, if you have two template variables, rowvalue1 and rowvalue2, you can alternate between their values like this:\r\n\r\n{% for o in some_list %}\r\n    <tr class=\"{% cycle rowvalue1 rowvalue2 %}\">\r\n        ...\r\n    </tr>\r\n{% endfor %}\r\nVariables included in the cycle will be escaped. You can disable auto-escaping with:\r\n\r\n{% for o in some_list %}\r\n    <tr class=\"{% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %}\">\r\n        ...\r\n    </tr>\r\n{% endfor %}\r\nYou can mix variables and strings:\r\n\r\n{% for o in some_list %}\r\n    <tr class=\"{% cycle 'row1' rowvalue2 'row3' %}\">\r\n        ...\r\n    </tr>\r\n{% endfor %}\r\nIn some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the {% cycle %} tag a name, using “as”, like this:\r\n\r\n{% cycle 'row1' 'row2' as rowcolors %}\r\nFrom then on, you can insert the current value of the cycle wherever you’d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original cycle tag, you can use another cycle tag and specify the name of the variable. So, the following template:\r\n\r\n<tr>\r\n    <td class=\"{% cycle 'row1' 'row2' as rowcolors %}\">...</td>\r\n    <td class=\"{{ rowcolors }}\">...</td>\r\n</tr>\r\n<tr>\r\n    <td class=\"{% cycle rowcolors %}\">...</td>\r\n    <td class=\"{{ rowcolors }}\">...</td>\r\n</tr>\r\nwould output:\r\n\r\n<tr>\r\n    <td class=\"row1\">...</td>\r\n    <td class=\"row1\">...</td>\r\n</tr>\r\n<tr>\r\n    <td class=\"row2\">...</td>\r\n    <td class=\"row2\">...</td>\r\n</tr>\r\nYou can use any number of values in a cycle tag, separated by spaces. Values enclosed in single quotes (') or double quotes (\") are treated as string literals, while values without quotes are treated as template variables.\r\n\r\nBy default, when you use the as keyword with the cycle tag, the usage of {% cycle %} that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a silent keyword as the last keyword in the tag. For example:\r\n\r\n{% for obj in some_list %}\r\n    {% cycle 'row1' 'row2' as rowcolors silent %}\r\n    <tr class=\"{{ rowcolors }}\">{% include \"subtemplate.html\" %}</tr>\r\n{% endfor %}\r\nThis will output a list of <tr> elements with class alternating between row1 and row2. The subtemplate will have access to rowcolors in its context and the value will match the class of the <tr> that encloses it. If the silent keyword were to be omitted, row1 and row2 would be emitted as normal text, outside the <tr> element.\r\n\r\nWhen the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output nothing, even though the second call to {% cycle %} doesn’t specify silent:\r\n\r\n{% cycle 'row1' 'row2' as rowcolors silent %}\r\n{% cycle rowcolors %}\r\nYou can use the resetcycle tag to make a {% cycle %} tag restart from its first value when it’s next encountered.\r\n\r\ndebug¶\r\nOutputs a whole load of debugging information, including the current context and imported modules. {% debug %} outputs nothing when the DEBUG setting is False.\r\n\r\nextends¶\r\nSignals that this template extends a parent template.\r\n\r\nThis tag can be used in two ways:\r\n\r\n{% extends \"base.html\" %} (with quotes) uses the literal value \"base.html\" as the name of the parent template to extend.\r\n\r\n{% extends variable %} uses the value of variable. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a Template object, Django will use that object as the parent template.\r\n\r\nSee Template inheritance for more information.\r\n\r\nNormally the template name is relative to the template loader’s root directory. A string argument may also be a relative path starting with ./ or ../. For example, assume the following directory structure:\r\n\r\ndir1/\r\n    template.html\r\n    base2.html\r\n    my/\r\n        base3.html\r\nbase1.html\r\nIn template.html, the following paths would be valid:\r\n\r\n{% extends \"./base2.html\" %}\r\n{% extends \"../base1.html\" %}\r\n{% extends \"./my/base3.html\" %}\r\nfilter¶\r\nFilters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.\r\n\r\nNote that the block includes all the text between the filter and endfilter tags.\r\n\r\nSample usage:\r\n\r\n{% filter force_escape|lower %}\r\n    This text will be HTML-escaped, and will appear in all lowercase.\r\n{% endfilter %}\r\nNote\r\n\r\nThe escape and safe filters are not acceptable arguments. Instead, use the autoescape tag to manage autoescaping for blocks of template code.\r\n\r\nfirstof¶\r\nOutputs the first argument variable that is not “false” (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are “false”.\r\n\r\nSample usage:\r\n\r\n{% firstof var1 var2 var3 %}\r\nThis is equivalent to:\r\n\r\n{% if var1 %}\r\n    {{ var1 }}\r\n{% elif var2 %}\r\n    {{ var2 }}\r\n{% elif var3 %}\r\n    {{ var3 }}\r\n{% endif %}\r\nYou can also use a literal string as a fallback value in case all passed variables are False:\r\n\r\n{% firstof var1 var2 var3 \"fallback value\" %}\r\nThis tag auto-escapes variable values. You can disable auto-escaping with:\r\n\r\n{% autoescape off %}\r\n    {% firstof var1 var2 var3 \"<strong>fallback value</strong>\" %}\r\n{% endautoescape %}\r\nOr if only some variables should be escaped, you can use:\r\n\r\n{% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\r\nYou can use the syntax {% firstof var1 var2 var3 as value %} to store the output inside a variable.\r\n\r\nfor¶\r\nLoops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in athlete_list:\r\n\r\n<ul>\r\n{% for athlete in athlete_list %}\r\n    <li>{{ athlete.name }}</li>\r\n{% endfor %}\r\n</ul>\r\nYou can loop over a list in reverse by using {% for obj in list reversed %}.\r\n\r\nIf you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called points, you could use the following to output the list of points:\r\n\r\n{% for x, y in points %}\r\n    There is a point at {{ x }},{{ y }}\r\n{% endfor %}\r\nThis can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary data, the following would display the keys and values of the dictionary:\r\n\r\n{% for key, value in data.items %}\r\n    {{ key }}: {{ value }}\r\n{% endfor %}\r\nKeep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the data dictionary contains a key named 'items', data.items will return data['items'] instead of data.items(). Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (items, values, keys, etc.). Read more about the lookup order of the dot operator in the documentation of template variables.\r\n\r\nThe for loop sets a number of variables available within the loop:\r\n\r\nVariable\r\n\r\nDescription\r\n\r\nforloop.counter\r\n\r\nThe current iteration of the loop (1-indexed)\r\n\r\nforloop.counter0\r\n\r\nThe current iteration of the loop (0-indexed)\r\n\r\nforloop.revcounter\r\n\r\nThe number of iterations from the end of the loop (1-indexed)\r\n\r\nforloop.revcounter0\r\n\r\nThe number of iterations from the end of the loop (0-indexed)\r\n\r\nforloop.first\r\n\r\nTrue if this is the first time through the loop\r\n\r\nforloop.last\r\n\r\nTrue if this is the last time through the loop\r\n\r\nforloop.parentloop\r\n\r\nFor nested loops, this is the loop surrounding the current one\r\n\r\nfor … empty¶\r\nThe for tag can take an optional {% empty %} clause whose text is displayed if the given array is empty or could not be found:\r\n\r\n<ul>\r\n{% for athlete in athlete_list %}\r\n    <li>{{ athlete.name }}</li>\r\n{% empty %}\r\n    <li>Sorry, no athletes in this list.</li>\r\n{% endfor %}\r\n</ul>\r\nThe above is equivalent to – but shorter, cleaner, and possibly faster than – the following:\r\n\r\n<ul>\r\n  {% if athlete_list %}\r\n    {% for athlete in athlete_list %}\r\n      <li>{{ athlete.name }}</li>\r\n    {% endfor %}\r\n  {% else %}\r\n    <li>Sorry, no athletes in this list.</li>\r\n  {% endif %}\r\n</ul>\r\nif¶\r\nThe {% if %} tag evaluates a variable, and if that variable is “true” (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output:\r\n\r\n{% if athlete_list %}\r\n    Number of athletes: {{ athlete_list|length }}\r\n{% elif athlete_in_locker_room_list %}\r\n    Athletes should be out of the locker room soon!\r\n{% else %}\r\n    No athletes.\r\n{% endif %}\r\nIn the above, if athlete_list is not empty, the number of athletes will be displayed by the {{ athlete_list|length }} variable.\r\n\r\nAs you can see, the if tag may take one or several {% elif %} clauses, as well as an {% else %} clause that will be displayed if all previous conditions fail. These clauses are optional.\r\n\r\nBoolean operators¶\r\nif tags may use and, or or not to test a number of variables or to negate a given variable:\r\n\r\n{% if athlete_list and coach_list %}\r\n    Both athletes and coaches are available.\r\n{% endif %}\r\n\r\n{% if not athlete_list %}\r\n    There are no athletes.\r\n{% endif %}\r\n\r\n{% if athlete_list or coach_list %}\r\n    There are some athletes or some coaches.\r\n{% endif %}\r\n\r\n{% if not athlete_list or coach_list %}\r\n    There are no athletes or there are some coaches.\r\n{% endif %}\r\n\r\n{% if athlete_list and not coach_list %}\r\n    There are some athletes and absolutely no coaches.\r\n{% endif %}\r\nUse of both and and or clauses within the same tag is allowed, with and having higher precedence than or e.g.:\r\n\r\n{% if athlete_list and coach_list or cheerleader_list %}\r\nwill be interpreted like:\r\n\r\nif (athlete_list and coach_list) or cheerleader_list:\r\n    ...\r\nUse of actual parentheses in the if tag is invalid syntax. If you need them to indicate precedence, you should use nested if tags.\r\n\r\nif tags may also use the operators ==, !=, <, >, <=, >=, in, not in, is, and is not which work as follows:\r\n\r\n== operator¶\r\nEquality. Example:\r\n\r\n{% if somevar == \"x\" %}\r\n  This appears if variable somevar equals the string \"x\"\r\n{% endif %}\r\n!= operator¶\r\nInequality. Example:\r\n\r\n{% if somevar != \"x\" %}\r\n  This appears if variable somevar does not equal the string \"x\",\r\n  or if somevar is not found in the context\r\n{% endif %}\r\n< operator¶\r\nLess than. Example:\r\n\r\n{% if somevar < 100 %}\r\n  This appears if variable somevar is less than 100.\r\n{% endif %}\r\n> operator¶\r\nGreater than. Example:\r\n\r\n{% if somevar > 0 %}\r\n  This appears if variable somevar is greater than 0.\r\n{% endif %}\r\n<= operator¶\r\nLess than or equal to. Example:\r\n\r\n{% if somevar <= 100 %}\r\n  This appears if variable somevar is less than 100 or equal to 100.\r\n{% endif %}\r\n>= operator¶\r\nGreater than or equal to. Example:\r\n\r\n{% if somevar >= 1 %}\r\n  This appears if variable somevar is greater than 1 or equal to 1.\r\n{% endif %}\r\nin operator¶\r\nContained within. This operator is supported by many Python containers to test whether the given value is in the container. The following are some examples of how x in y will be interpreted:\r\n\r\n{% if \"bc\" in \"abcdef\" %}\r\n  This appears since \"bc\" is a substring of \"abcdef\"\r\n{% endif %}\r\n\r\n{% if \"hello\" in greetings %}\r\n  If greetings is a list or set, one element of which is the string\r\n  \"hello\", this will appear.\r\n{% endif %}\r\n\r\n{% if user in users %}\r\n  If users is a QuerySet, this will appear if user is an\r\n  instance that belongs to the QuerySet.\r\n{% endif %}\r\nnot in operator¶\r\nNot contained within. This is the negation of the in operator.\r\n\r\nis operator¶\r\nObject identity. Tests if two values are the same object. Example:\r\n\r\n{% if somevar is True %}\r\n  This appears if and only if somevar is True.\r\n{% endif %}\r\n\r\n{% if somevar is None %}\r\n  This appears if somevar is None, or if somevar is not found in the context.\r\n{% endif %}\r\nis not operator¶\r\nNegated object identity. Tests if two values are not the same object. This is the negation of the is operator. Example:\r\n\r\n{% if somevar is not True %}\r\n  This appears if somevar is not True, or if somevar is not found in the\r\n  context.\r\n{% endif %}\r\n\r\n{% if somevar is not None %}\r\n  This appears if and only if somevar is not None.\r\n{% endif %}\r\nFilters¶\r\nYou can also use filters in the if expression. For example:\r\n\r\n{% if messages|length >= 100 %}\r\n   You have lots of messages today!\r\n{% endif %}\r\nComplex expressions¶\r\nAll of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:\r\n\r\nor\r\n\r\nand\r\n\r\nnot\r\n\r\nin\r\n\r\n==, !=, <, >, <=, >=\r\n\r\n(This follows Python exactly). So, for example, the following complex if tag:\r\n\r\n{% if a == b or c == d and e %}\r\n…will be interpreted as:\r\n\r\n(a == b) or ((c == d) and e)\r\nIf you need different precedence, you will need to use nested if tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.\r\n\r\nThe comparison operators cannot be ‘chained’ like in Python or in mathematical notation. For example, instead of using:\r\n\r\n{% if a > b > c %}  (WRONG)\r\nyou should use:\r\n\r\n{% if a > b and b > c %}\r\nifchanged¶\r\nCheck if a value has changed from the last iteration of a loop.\r\n\r\nThe {% ifchanged %} block tag is used within a loop. It has two possible uses.\r\n\r\nChecks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes:\r\n\r\n<h1>Archive for {{ year }}</h1>\r\n\r\n{% for date in days %}\r\n    {% ifchanged %}<h3>{{ date|date:\"F\" }}</h3>{% endifchanged %}\r\n    <a href=\"{{ date|date:\"M/d\"|lower }}/\">{{ date|date:\"j\" }}</a>\r\n{% endfor %}\r\nIf given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:\r\n\r\n{% for date in days %}\r\n    {% ifchanged date.date %} {{ date.date }} {% endifchanged %}\r\n    {% ifchanged date.hour date.date %}\r\n        {{ date.hour }}\r\n    {% endifchanged %}\r\n{% endfor %}\r\nThe ifchanged tag can also take an optional {% else %} clause that will be displayed if the value has not changed:\r\n\r\n{% for match in matches %}\r\n    <div style=\"background-color:\r\n        {% ifchanged match.ballot_id %}\r\n            {% cycle \"red\" \"blue\" %}\r\n        {% else %}\r\n            gray\r\n        {% endifchanged %}\r\n    \">{{ match }}</div>\r\n{% endfor %}\r\ninclude¶\r\nLoads a template and renders it with the current context. This is a way of “including” other templates within a template.\r\n\r\nThe template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.\r\n\r\nThis example includes the contents of the template \"foo/bar.html\":\r\n\r\n{% include \"foo/bar.html\" %}\r\nNormally the template name is relative to the template loader’s root directory. A string argument may also be a relative path starting with ./ or ../ as described in the extends tag.\r\n\r\nThis example includes the contents of the template whose name is contained in the variable template_name:\r\n\r\n{% include template_name %}\r\nThe variable may also be any object with a render() method that accepts a context. This allows you to reference a compiled Template in your context.\r\n\r\nAdditionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per select_template().\r\n\r\nAn included template is rendered within the context of the template that includes it. This example produces the output \"Hello, John!\":\r\n\r\nContext: variable person is set to \"John\" and variable greeting is set to \"Hello\".\r\n\r\nTemplate:\r\n\r\n{% include \"name_snippet.html\" %}\r\nThe name_snippet.html template:\r\n\r\n{{ greeting }}, {{ person|default:\"friend\" }}!\r\nYou can pass additional context to the template using keyword arguments:\r\n\r\n{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}\r\nIf you want to render the context only with the variables provided (or even no variables at all), use the only option. No other variables are available to the included template:\r\n\r\n{% include \"name_snippet.html\" with greeting=\"Hi\" only %}\r\nNote\r\n\r\nThe include tag should be considered as an implementation of “render this subtemplate and include the HTML”, not as “parse this subtemplate and include its contents as if it were part of the parent”. This means that there is no shared state between included templates – each include is a completely independent rendering process.\r\n\r\nBlocks are evaluated before they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template.\r\n\r\nload¶\r\nLoads a custom template tag set.\r\n\r\nFor example, the following template would load all the tags and filters registered in somelibrary and otherlibrary located in package package:\r\n\r\n{% load somelibrary package.otherlibrary %}\r\nYou can also selectively load individual filters or tags from a library, using the from argument. In this example, the template tags/filters named foo and bar will be loaded from somelibrary:\r\n\r\n{% load foo bar from somelibrary %}\r\nSee Custom tag and filter libraries for more information.\r\n\r\nlorem¶\r\nDisplays random “lorem ipsum” Latin text. This is useful for providing sample data in templates.\r\n\r\nUsage:\r\n\r\n{% lorem [count] [method] [random] %}\r\nThe {% lorem %} tag can be used with zero, one, two or three arguments. The arguments are:\r\n\r\nArgument\r\n\r\nDescription\r\n\r\ncount\r\n\r\nA number (or variable) containing the number of paragraphs or words to generate (default is 1).\r\n\r\nmethod\r\n\r\nEither w for words, p for HTML paragraphs or b for plain-text paragraph blocks (default is b).\r\n\r\nrandom\r\n\r\nThe word random, which if given, does not use the common paragraph (“Lorem ipsum dolor sit amet…”) when generating text.\r\n\r\nExamples:\r\n\r\n{% lorem %} will output the common “lorem ipsum” paragraph.\r\n\r\n{% lorem 3 p %} will output the common “lorem ipsum” paragraph and two random paragraphs each wrapped in HTML <p> tags.\r\n\r\n{% lorem 2 w random %} will output two random Latin words.\r\n\r\nnow¶\r\nDisplays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the date filter section.\r\n\r\nExample:\r\n\r\nIt is {% now \"jS F Y H:i\" %}\r\nNote that you can backslash-escape a format string if you want to use the “raw” value. In this example, both “o” and “f” are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:\r\n\r\nIt is the {% now \"jS \\o\\f F\" %}\r\nThis would display as “It is the 4th of September”.\r\n\r\nNote\r\n\r\nThe format passed can also be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT. The predefined formats may vary depending on the current locale and if Format localization is enabled, e.g.:\r\n\r\nIt is {% now \"SHORT_DATETIME_FORMAT\" %}\r\nYou can also use the syntax {% now \"Y\" as current_year %} to store the output (as a string) inside a variable. This is useful if you want to use {% now %} inside a template tag like blocktranslate for example:\r\n\r\n{% now \"Y\" as current_year %}\r\n{% blocktranslate %}Copyright {{ current_year }}{% endblocktranslate %}\r\nquerystring¶\r\nNew in Django 5.1.\r\nOutputs a URL-encoded formatted query string based on the provided parameters.\r\n\r\nThis tag requires a QueryDict instance, which defaults to request.GET if none is provided.\r\n\r\nIf the QueryDict is empty and no additional parameters are provided, an empty string is returned. Otherwise, the result includes a leading \"?\".\r\n\r\nUsing request.GET as default\r\n\r\nTo use request.GET as the default QueryDict instance, the django.template.context_processors.request context processor should be enabled. If it’s not enabled, you must either explicitly pass the request object into the template context, or provide a QueryDict instance to this tag.\r\n\r\nBasic usage¶\r\n{% querystring %}\r\nOutputs the current query string verbatim. So if the query string is ?color=green, the output would be ?color=green.\r\n\r\n{% querystring size=\"M\" %}\r\nOutputs the current query string with the addition of the size parameter. Following the previous example, the output would be ?color=green&size=M.\r\n\r\nCustom QueryDict¶\r\n{% querystring my_query_dict %}\r\nYou can provide a custom QueryDict to be used instead of request.GET. So if my_query_dict is <QueryDict: {'color': ['blue']}>, this outputs ?color=blue.\r\n\r\nSetting items¶\r\n{% querystring color=\"red\" size=\"S\" %}\r\nAdds or modifies parameters in the query string. Each keyword argument will be added to the query string, replacing any existing value for that key. For instance, if the current query string is ?color=green, the output will be ?color=red&size=S.\r\n\r\nRemoving items¶\r\n{% querystring color=None %}\r\nPassing None as the value removes the parameter from the query string. For example, if the current query string is ?color=green&size=M, the output will be ?size=M.\r\n\r\nHandling lists¶\r\n{% querystring color=my_list %}\r\nIf my_list is [\"red\", \"blue\"], the output will be ?color=red&color=blue, preserving the list structure in the query string.\r\n\r\nDynamic usage¶\r\nA common example of using this tag is to preserve the current query string when displaying a page of results, while adding a link to the next and previous pages of results. For example, if the paginator is currently on page 3, and the current query string is ?color=blue&size=M&page=3, the following code would output ?color=blue&size=M&page=4:\r\n\r\n{% querystring page=page.next_page_number %}\r\nYou can also store the value in a variable. For example, if you need multiple links to the same page, define it as:\r\n\r\n{% querystring page=page.next_page_number as next_page %}\r\nregroup¶\r\nRegroups a list of alike objects by a common attribute.\r\n\r\nThis complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing \"name\", \"population\", and \"country\" keys:\r\n\r\ncities = [\r\n    {\"name\": \"Mumbai\", \"population\": \"19,000,000\", \"country\": \"India\"},\r\n    {\"name\": \"Calcutta\", \"population\": \"15,000,000\", \"country\": \"India\"},\r\n    {\"name\": \"New York\", \"population\": \"20,000,000\", \"country\": \"USA\"},\r\n    {\"name\": \"Chicago\", \"population\": \"7,000,000\", \"country\": \"USA\"},\r\n    {\"name\": \"Tokyo\", \"population\": \"33,000,000\", \"country\": \"Japan\"},\r\n]\r\n…and you’d like to display a hierarchical list that is ordered by country, like this:\r\n\r\nIndia\r\n\r\nMumbai: 19,000,000\r\n\r\nCalcutta: 15,000,000\r\n\r\nUSA\r\n\r\nNew York: 20,000,000\r\n\r\nChicago: 7,000,000\r\n\r\nJapan\r\n\r\nTokyo: 33,000,000\r\n\r\nYou can use the {% regroup %} tag to group the list of cities by country. The following snippet of template code would accomplish this:\r\n\r\n{% regroup cities by country as country_list %}\r\n\r\n<ul>\r\n{% for country in country_list %}\r\n    <li>{{ country.grouper }}\r\n    <ul>\r\n        {% for city in country.list %}\r\n          <li>{{ city.name }}: {{ city.population }}</li>\r\n        {% endfor %}\r\n    </ul>\r\n    </li>\r\n{% endfor %}\r\n</ul>\r\nLet’s walk through this example. {% regroup %} takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we’re regrouping the cities list by the country attribute and calling the result country_list.\r\n\r\n{% regroup %} produces a list (in this case, country_list) of group objects. Group objects are instances of namedtuple() with two fields:\r\n\r\ngrouper – the item that was grouped by (e.g., the string “India” or “Japan”).\r\n\r\nlist – a list of all items in this group (e.g., a list of all cities with country=’India’).\r\n\r\nBecause {% regroup %} produces namedtuple() objects, you can also write the previous example as:\r\n\r\n{% regroup cities by country as country_list %}\r\n\r\n<ul>\r\n{% for country, local_cities in country_list %}\r\n    <li>{{ country }}\r\n    <ul>\r\n        {% for city in local_cities %}\r\n          <li>{{ city.name }}: {{ city.population }}</li>\r\n        {% endfor %}\r\n    </ul>\r\n    </li>\r\n{% endfor %}\r\n</ul>\r\nNote that {% regroup %} does not order its input! Our example relies on the fact that the cities list was ordered by country in the first place. If the cities list did not order its members by country, the regrouping would naively display more than one group for a single country. For example, say the cities list was set to this (note that the countries are not grouped together):\r\n\r\ncities = [\r\n    {\"name\": \"Mumbai\", \"population\": \"19,000,000\", \"country\": \"India\"},\r\n    {\"name\": \"New York\", \"population\": \"20,000,000\", \"country\": \"USA\"},\r\n    {\"name\": \"Calcutta\", \"population\": \"15,000,000\", \"country\": \"India\"},\r\n    {\"name\": \"Chicago\", \"population\": \"7,000,000\", \"country\": \"USA\"},\r\n    {\"name\": \"Tokyo\", \"population\": \"33,000,000\", \"country\": \"Japan\"},\r\n]\r\nWith this input for cities, the example {% regroup %} template code above would result in the following output:\r\n\r\nIndia\r\n\r\nMumbai: 19,000,000\r\n\r\nUSA\r\n\r\nNew York: 20,000,000\r\n\r\nIndia\r\n\r\nCalcutta: 15,000,000\r\n\r\nUSA\r\n\r\nChicago: 7,000,000\r\n\r\nJapan\r\n\r\nTokyo: 33,000,000\r\n\r\nThe easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.\r\n\r\nAnother solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries:\r\n\r\n{% regroup cities|dictsort:\"country\" by country as country_list %}\r\nGrouping on other properties¶\r\nAny valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the “country” field is a foreign key to a class with an attribute “description,” you could use:\r\n\r\n{% regroup cities by country.description as country_list %}\r\nOr, if country is a field with choices, it will have a get_FOO_display() method available as an attribute, allowing you to group on the display string rather than the choices key:\r\n\r\n{% regroup cities by get_country_display as country_list %}\r\n{{ country.grouper }} will now display the value fields from the choices set rather than the keys.\r\n\r\nresetcycle¶\r\nResets a previous cycle so that it restarts from its first item at its next encounter. Without arguments, {% resetcycle %} will reset the last {% cycle %} defined in the template.\r\n\r\nExample usage:\r\n\r\n{% for coach in coach_list %}\r\n    <h1>{{ coach.name }}</h1>\r\n    {% for athlete in coach.athlete_set.all %}\r\n        <p class=\"{% cycle 'odd' 'even' %}\">{{ athlete.name }}</p>\r\n    {% endfor %}\r\n    {% resetcycle %}\r\n{% endfor %}\r\nThis example would return this HTML:\r\n\r\n<h1>Gareth</h1>\r\n<p class=\"odd\">Harry</p>\r\n<p class=\"even\">John</p>\r\n<p class=\"odd\">Nick</p>\r\n\r\n<h1>John</h1>\r\n<p class=\"odd\">Andrea</p>\r\n<p class=\"even\">Melissa</p>\r\nNotice how the first block ends with class=\"odd\" and the new one starts with class=\"odd\". Without the {% resetcycle %} tag, the second block would start with class=\"even\".\r\n\r\nYou can also reset named cycle tags:\r\n\r\n{% for item in list %}\r\n    <p class=\"{% cycle 'odd' 'even' as stripe %} {% cycle 'major' 'minor' 'minor' 'minor' 'minor' as tick %}\">\r\n        {{ item.data }}\r\n    </p>\r\n    {% ifchanged item.category %}\r\n        <h1>{{ item.category }}</h1>\r\n        {% if not forloop.first %}{% resetcycle tick %}{% endif %}\r\n    {% endifchanged %}\r\n{% endfor %}\r\nIn this example, we have both the alternating odd/even rows and a “major” row every fifth row. Only the five-row cycle is reset when a category changes.\r\n\r\nspaceless¶\r\nRemoves whitespace between HTML tags. This includes tab characters and newlines.\r\n\r\nExample usage:\r\n\r\n{% spaceless %}\r\n    <p>\r\n        <a href=\"foo/\">Foo</a>\r\n    </p>\r\n{% endspaceless %}\r\nThis example would return this HTML:\r\n\r\n<p><a href=\"foo/\">Foo</a></p>\r\nOnly space between tags is removed – not space between tags and text. In this example, the space around Hello won’t be stripped:\r\n\r\n{% spaceless %}\r\n    <strong>\r\n        Hello\r\n    </strong>\r\n{% endspaceless %}\r\ntemplatetag¶\r\nOutputs one of the syntax characters used to compose template tags.\r\n\r\nThe template system has no concept of “escaping” individual characters. However, you can use the {% templatetag %} tag to display one of the template tag character combinations.\r\n\r\nThe argument tells which template bit to output:\r\n\r\nArgument\r\n\r\nOutputs\r\n\r\nopenblock\r\n\r\n{%\r\n\r\ncloseblock\r\n\r\n%}\r\n\r\nopenvariable\r\n\r\n{{\r\n\r\nclosevariable\r\n\r\n}}\r\n\r\nopenbrace\r\n\r\n{\r\n\r\nclosebrace\r\n\r\n}\r\n\r\nopencomment\r\n\r\n{#\r\n\r\nclosecomment\r\n\r\n#}\r\n\r\nSample usage:\r\n\r\nThe {% templatetag openblock %} characters open a block.\r\nSee also the verbatim tag for another way of including these characters.\r\n\r\nurl¶\r\nReturns an absolute path reference (a URL without the domain name) matching a given view and optional parameters. Any special characters in the resulting path will be encoded using iri_to_uri().\r\n\r\nThis is a way to output links without violating the DRY principle by having to hard-code URLs in your templates:\r\n\r\n{% url 'some-url-name' v1 v2 %}\r\nThe first argument is a URL pattern name. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:\r\n\r\n{% url 'some-url-name' arg1=v1 arg2=v2 %}\r\nDo not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.\r\n\r\nFor example, suppose you have a view, app_views.client, whose URLconf takes a client ID (here, client() is a method inside the views file app_views.py). The URLconf line might look like this:\r\n\r\npath(\"client/<int:id>/\", app_views.client, name=\"app-views-client\")\r\nIf this app’s URLconf is included into the project’s URLconf under a path such as this:\r\n\r\npath(\"clients/\", include(\"project_name.app_name.urls\"))\r\n…then, in a template, you can create a link to this view like this:\r\n\r\n{% url 'app-views-client' client.id %}\r\nThe template tag will output the string /clients/client/123/.\r\n\r\nNote that if the URL you’re reversing doesn’t exist, you’ll get an NoReverseMatch exception raised, which will cause your site to display an error page.\r\n\r\nIf you’d like to retrieve a URL without displaying it, you can use a slightly different call:\r\n\r\n{% url 'some-url-name' arg arg2 as the_url %}\r\n\r\n<a href=\"{{ the_url }}\">I'm linking to {{ the_url }}</a>\r\nThe scope of the variable created by the as var syntax is the {% block %} in which the {% url %} tag appears.\r\n\r\nThis {% url ... as var %} syntax will not cause an error if the view is missing. In practice you’ll use this to link to views that are optional:\r\n\r\n{% url 'some-url-name' as the_url %}\r\n{% if the_url %}\r\n  <a href=\"{{ the_url }}\">Link to optional stuff</a>\r\n{% endif %}\r\nIf you’d like to retrieve a namespaced URL, specify the fully qualified name:\r\n\r\n{% url 'myapp:view-name' %}\r\nThis will follow the normal namespaced URL resolution strategy, including using any hints provided by the context as to the current application.\r\n\r\nWarning\r\n\r\nDon’t forget to put quotes around the URL pattern name, otherwise the value will be interpreted as a context variable!\r\n\r\nverbatim¶\r\nStops the template engine from rendering the contents of this block tag.\r\n\r\nA common use is to allow a JavaScript template layer that collides with Django’s syntax. For example:\r\n\r\n{% verbatim %}\r\n    {{if dying}}Still alive.{{/if}}\r\n{% endverbatim %}\r\nYou can also designate a specific closing tag, allowing the use of {% endverbatim %} as part of the unrendered contents:\r\n\r\n{% verbatim myblock %}\r\n    Avoid template rendering via the {% verbatim %}{% endverbatim %} block.\r\n{% endverbatim myblock %}\r\nwidthratio¶\r\nFor creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.\r\n\r\nFor example:\r\n\r\n<img src=\"bar.png\" alt=\"Bar\"\r\n     height=\"10\" width=\"{% widthratio this_value max_value max_width %}\">\r\nIf this_value is 175, max_value is 200, and max_width is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).\r\n\r\nIn some cases you might want to capture the result of widthratio in a variable. It can be useful, for instance, in a blocktranslate like this:\r\n\r\n{% widthratio this_value max_value max_width as width %}\r\n{% blocktranslate %}The width is: {{ width }}{% endblocktranslate %}\r\nwith¶\r\nCaches a complex variable under a simpler name. This is useful when accessing an “expensive” method (e.g., one that hits the database) multiple times.\r\n\r\nFor example:\r\n\r\n{% with total=business.employees.count %}\r\n    {{ total }} employee{{ total|pluralize }}\r\n{% endwith %}\r\nThe populated variable (in the example above, total) is only available between the {% with %} and {% endwith %} tags.\r\n\r\nYou can assign more than one context variable:\r\n\r\n{% with alpha=1 beta=2 %}\r\n    ...\r\n{% endwith %}\r\nNote\r\n\r\nThe previous more verbose format is still supported: {% with business.employees.count as total %}\r\n\r\nBuilt-in filter reference¶\r\nadd¶\r\nAdds the argument to the value.\r\n\r\nFor example:\r\n\r\n{{ value|add:\"2\" }}\r\nIf value is 4, then the output will be 6.\r\n\r\nThis filter will first try to coerce both values to integers. If this fails, it’ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string.\r\n\r\nFor example, if we have:\r\n\r\n{{ first|add:second }}\r\nand first is [1, 2, 3] and second is [4, 5, 6], then the output will be [1, 2, 3, 4, 5, 6].\r\n\r\nWarning\r\n\r\nStrings that can be coerced to integers will be summed, not concatenated, as in the first example above.\r\n\r\naddslashes¶\r\nAdds slashes before quotes. Useful for escaping strings in CSV, for example.\r\n\r\nFor example:\r\n\r\n{{ value|addslashes }}\r\nIf value is \"I'm using Django\", the output will be \"I\\'m using Django\".\r\n\r\ncapfirst¶\r\nCapitalizes the first character of the value. If the first character is not a letter, this filter has no effect.\r\n\r\nFor example:\r\n\r\n{{ value|capfirst }}\r\nIf value is \"django\", the output will be \"Django\".\r\n\r\ncenter¶\r\nCenters the value in a field of a given width.\r\n\r\nFor example:\r\n\r\n\"{{ value|center:\"15\" }}\"\r\nIf value is \"Django\", the output will be \"     Django    \".\r\n\r\ncut¶\r\nRemoves all values of arg from the given string.\r\n\r\nFor example:\r\n\r\n{{ value|cut:\" \" }}\r\nIf value is \"String with spaces\", the output will be \"Stringwithspaces\".\r\n\r\ndate¶\r\nFormats a date according to the given format.\r\n\r\nUses a similar format to PHP’s date() function with some differences.\r\n\r\nNote\r\n\r\nThese format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.\r\n\r\nAvailable format strings:\r\n\r\nFormat character\r\n\r\nDescription\r\n\r\nExample output\r\n\r\nDay\r\n\r\nd\r\n\r\nDay of the month, 2 digits with leading zeros.\r\n\r\n'01' to '31'\r\n\r\nj\r\n\r\nDay of the month without leading zeros.\r\n\r\n'1' to '31'\r\n\r\nD\r\n\r\nDay of the week, textual, 3 letters.\r\n\r\n'Fri'\r\n\r\nl\r\n\r\nDay of the week, textual, long.\r\n\r\n'Friday'\r\n\r\nS\r\n\r\nEnglish ordinal suffix for day of the month, 2 characters.\r\n\r\n'st', 'nd', 'rd' or 'th'\r\n\r\nw\r\n\r\nDay of the week, digits without leading zeros.\r\n\r\n'0' (Sunday) to '6' (Saturday)\r\n\r\nz\r\n\r\nDay of the year.\r\n\r\n1 to 366\r\n\r\nWeek\r\n\r\nW\r\n\r\nISO-8601 week number of year, with weeks starting on Monday.\r\n\r\n1, 53\r\n\r\nMonth\r\n\r\nm\r\n\r\nMonth, 2 digits with leading zeros.\r\n\r\n'01' to '12'\r\n\r\nn\r\n\r\nMonth without leading zeros.\r\n\r\n'1' to '12'\r\n\r\nM\r\n\r\nMonth, textual, 3 letters.\r\n\r\n'Jan'\r\n\r\nb\r\n\r\nMonth, textual, 3 letters, lowercase.\r\n\r\n'jan'\r\n\r\nE\r\n\r\nMonth, locale specific alternative representation usually used for long date representation.\r\n\r\n'listopada' (for Polish locale, as opposed to 'Listopad')\r\n\r\nF\r\n\r\nMonth, textual, long.\r\n\r\n'January'\r\n\r\nN\r\n\r\nMonth abbreviation in Associated Press style. Proprietary extension.\r\n\r\n'Jan.', 'Feb.', 'March', 'May'\r\n\r\nt\r\n\r\nNumber of days in the given month.\r\n\r\n28 to 31\r\n\r\nYear\r\n\r\ny\r\n\r\nYear, 2 digits with leading zeros.\r\n\r\n'00' to '99'\r\n\r\nY\r\n\r\nYear, 4 digits with leading zeros.\r\n\r\n'0001', …, '1999', …, '9999'\r\n\r\nL\r\n\r\nBoolean for whether it’s a leap year.\r\n\r\nTrue or False\r\n\r\no\r\n\r\nISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format.\r\n\r\n'1999'\r\n\r\nTime\r\n\r\ng\r\n\r\nHour, 12-hour format without leading zeros.\r\n\r\n'1' to '12'\r\n\r\nG\r\n\r\nHour, 24-hour format without leading zeros.\r\n\r\n'0' to '23'\r\n\r\nh\r\n\r\nHour, 12-hour format.\r\n\r\n'01' to '12'\r\n\r\nH\r\n\r\nHour, 24-hour format.\r\n\r\n'00' to '23'\r\n\r\ni\r\n\r\nMinutes.\r\n\r\n'00' to '59'\r\n\r\ns\r\n\r\nSeconds, 2 digits with leading zeros.\r\n\r\n'00' to '59'\r\n\r\nu\r\n\r\nMicroseconds.\r\n\r\n000000 to 999999\r\n\r\na\r\n\r\n'a.m.' or 'p.m.' (Note that this is slightly different than PHP’s output, because this includes periods to match Associated Press style.)\r\n\r\n'a.m.'\r\n\r\nA\r\n\r\n'AM' or 'PM'.\r\n\r\n'AM'\r\n\r\nf\r\n\r\nTime, in 12-hour hours and minutes, with minutes left off if they’re zero. Proprietary extension.\r\n\r\n'1', '1:30'\r\n\r\nP\r\n\r\nTime, in 12-hour hours, minutes and ‘a.m.’/’p.m.’, with minutes left off if they’re zero and the special-case strings ‘midnight’ and ‘noon’ if appropriate. Proprietary extension.\r\n\r\n'1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'\r\n\r\nTimezone\r\n\r\ne\r\n\r\nTimezone name. Could be in any format, or might return an empty string, depending on the datetime.\r\n\r\n'', 'GMT', '-500', 'US/Eastern', etc.\r\n\r\nI\r\n\r\nDaylight saving time, whether it’s in effect or not.\r\n\r\n'1' or '0'\r\n\r\nO\r\n\r\nDifference to Greenwich time in hours.\r\n\r\n'+0200'\r\n\r\nT\r\n\r\nTime zone of this machine.\r\n\r\n'EST', 'MDT'\r\n\r\nZ\r\n\r\nTime zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\r\n\r\n-43200 to 43200\r\n\r\nDate/Time\r\n\r\nc\r\n\r\nISO 8601 format. (Note: unlike other formatters, such as “Z”, “O” or “r”, the “c” formatter will not add timezone offset if value is a naive datetime (see datetime.tzinfo).\r\n\r\n2008-01-02T10:30:00.000123+02:00, or 2008-01-02T10:30:00.000123 if the datetime is naive\r\n\r\nr\r\n\r\nRFC 5322 formatted date.\r\n\r\n'Thu, 21 Dec 2000 16:01:07 +0200'\r\n\r\nU\r\n\r\nSeconds since the Unix Epoch (January 1 1970 00:00:00 UTC).\r\n\r\nFor example:\r\n\r\n{{ value|date:\"D d M Y\" }}\r\nIf value is a datetime object (e.g., the result of datetime.datetime.now()), the output will be the string 'Wed 09 Jan 2008'.\r\n\r\nThe format passed can be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.\r\n\r\nAssuming that LANGUAGE_CODE is, for example, \"es\", then for:\r\n\r\n{{ value|date:\"SHORT_DATE_FORMAT\" }}\r\nthe output would be the string \"09/01/2008\" (the \"SHORT_DATE_FORMAT\" format specifier for the es locale as shipped with Django is \"d/m/Y\").\r\n\r\nWhen used without a format string, the DATE_FORMAT format specifier is used. Assuming the same settings as the previous example:\r\n\r\n{{ value|date }}\r\noutputs 9 de Enero de 2008 (the DATE_FORMAT format specifier for the es locale is r'j \\d\\e F \\d\\e Y'). Both “d” and “e” are backslash-escaped, because otherwise each is a format string that displays the day and the timezone name, respectively.\r\n\r\nYou can combine date with the time filter to render a full representation of a datetime value. E.g.:\r\n\r\n{{ value|date:\"D d M Y\" }} {{ value|time:\"H:i\" }}\r\ndefault¶\r\nIf value evaluates to False, uses the given default. Otherwise, uses the value.\r\n\r\nFor example:\r\n\r\n{{ value|default:\"nothing\" }}\r\nIf value is \"\" (the empty string), the output will be nothing.\r\n\r\ndefault_if_none¶\r\nIf (and only if) value is None, uses the given default. Otherwise, uses the value.\r\n\r\nNote that if an empty string is given, the default value will not be used. Use the default filter if you want to fallback for empty strings.\r\n\r\nFor example:\r\n\r\n{{ value|default_if_none:\"nothing\" }}\r\nIf value is None, the output will be nothing.\r\n\r\ndictsort¶\r\nTakes a list of dictionaries and returns that list sorted by the key given in the argument.\r\n\r\nFor example:\r\n\r\n{{ value|dictsort:\"name\" }}\r\nIf value is:\r\n\r\n[\r\n    {\"name\": \"zed\", \"age\": 19},\r\n    {\"name\": \"amy\", \"age\": 22},\r\n    {\"name\": \"joe\", \"age\": 31},\r\n]\r\nthen the output would be:\r\n\r\n[\r\n    {\"name\": \"amy\", \"age\": 22},\r\n    {\"name\": \"joe\", \"age\": 31},\r\n    {\"name\": \"zed\", \"age\": 19},\r\n]\r\nYou can also do more complicated things like:\r\n\r\n{% for book in books|dictsort:\"author.age\" %}\r\n    * {{ book.title }} ({{ book.author.name }})\r\n{% endfor %}\r\nIf books is:\r\n\r\n[\r\n    {\"title\": \"1984\", \"author\": {\"name\": \"George\", \"age\": 45}},\r\n    {\"title\": \"Timequake\", \"author\": {\"name\": \"Kurt\", \"age\": 75}},\r\n    {\"title\": \"Alice\", \"author\": {\"name\": \"Lewis\", \"age\": 33}},\r\n]\r\nthen the output would be:\r\n\r\n* Alice (Lewis)\r\n* 1984 (George)\r\n* Timequake (Kurt)\r\ndictsort can also order a list of lists (or any other object implementing __getitem__()) by elements at specified index. For example:\r\n\r\n{{ value|dictsort:0 }}\r\nIf value is:\r\n\r\n[\r\n    (\"a\", \"42\"),\r\n    (\"c\", \"string\"),\r\n    (\"b\", \"foo\"),\r\n]\r\nthen the output would be:\r\n\r\n[\r\n    (\"a\", \"42\"),\r\n    (\"b\", \"foo\"),\r\n    (\"c\", \"string\"),\r\n]\r\nYou must pass the index as an integer rather than a string. The following produce empty output:\r\n\r\n{{ values|dictsort:\"0\" }}\r\nOrdering by elements at specified index is not supported on dictionaries.\r\n\r\ndictsortreversed¶\r\nTakes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order.\r\n\r\ndivisibleby¶\r\nReturns True if the value is divisible by the argument.\r\n\r\nFor example:\r\n\r\n{{ value|divisibleby:\"3\" }}\r\nIf value is 21, the output would be True.\r\n\r\nescape¶\r\nEscapes a string’s HTML. Specifically, it makes these replacements:\r\n\r\n< is converted to &lt;\r\n\r\n> is converted to &gt;\r\n\r\n' (single quote) is converted to &#x27;\r\n\r\n\" (double quote) is converted to &quot;\r\n\r\n& is converted to &amp;\r\n\r\nApplying escape to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the force_escape filter.\r\n\r\nFor example, you can apply escape to fields when autoescape is off:\r\n\r\n{% autoescape off %}\r\n    {{ title|escape }}\r\n{% endautoescape %}\r\nChaining escape with other filters\r\n\r\nAs mentioned in the autoescape section, when filters including escape are chained together, it can result in unexpected outcomes if preceding filters mark a potentially unsafe string as safe due to the lack of escaping caused by autoescape being off.\r\n\r\nIn such cases, chaining escape would not reescape strings that have already been marked as safe.\r\n\r\nThis is especially important when using filters that operate on sequences, for example join. If you need to escape each element in a sequence, use the dedicated escapeseq filter.\r\n\r\nescapejs¶\r\nEscapes characters for use as a whole JavaScript string literal, within single or double quotes, as below. This filter does not make the string safe for use in “JavaScript template literals” (the JavaScript backtick syntax). Any other uses not listed above are not supported. It is generally recommended that data should be passed using HTML data- attributes, or the json_script filter, rather than in embedded JavaScript.\r\n\r\nFor example:\r\n\r\n<script>\r\nlet myValue = '{{ value|escapejs }}'\r\nescapeseq¶\r\nNew in Django 5.0.\r\nApplies the escape filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as join. For example:\r\n\r\n{% autoescape off %}\r\n    {{ my_list|escapeseq|join:\", \" }}\r\n{% endautoescape %}\r\nfilesizeformat¶\r\nFormats the value like a ‘human-readable’ file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc.).\r\n\r\nFor example:\r\n\r\n{{ value|filesizeformat }}\r\nIf value is 123456789, the output would be 117.7 MB.\r\n\r\nFile sizes and SI units\r\n\r\nStrictly speaking, filesizeformat does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used.\r\n\r\nfirst¶\r\nReturns the first item in a list.\r\n\r\nFor example:\r\n\r\n{{ value|first }}\r\nIf value is the list ['a', 'b', 'c'], the output will be 'a'.\r\n\r\nfloatformat¶\r\nWhen used without an argument, rounds a floating-point number to one decimal place – but only if there’s a decimal part to be displayed. For example:\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34.23234\r\n\r\n{{ value|floatformat }}\r\n\r\n34.2\r\n\r\n34.00000\r\n\r\n{{ value|floatformat }}\r\n\r\n34\r\n\r\n34.26000\r\n\r\n{{ value|floatformat }}\r\n\r\n34.3\r\n\r\nIf used with a numeric integer argument, floatformat rounds a number to that many decimal places. For example:\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34.23234\r\n\r\n{{ value|floatformat:3 }}\r\n\r\n34.232\r\n\r\n34.00000\r\n\r\n{{ value|floatformat:3 }}\r\n\r\n34.000\r\n\r\n34.26000\r\n\r\n{{ value|floatformat:3 }}\r\n\r\n34.260\r\n\r\nParticularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34.23234\r\n\r\n{{ value|floatformat:\"0\" }}\r\n\r\n34\r\n\r\n34.00000\r\n\r\n{{ value|floatformat:\"0\" }}\r\n\r\n34\r\n\r\n39.56000\r\n\r\n{{ value|floatformat:\"0\" }}\r\n\r\n40\r\n\r\nIf the argument passed to floatformat is negative, it will round a number to that many decimal places – but only if there’s a decimal part to be displayed. For example:\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34.23234\r\n\r\n{{ value|floatformat:\"-3\" }}\r\n\r\n34.232\r\n\r\n34.00000\r\n\r\n{{ value|floatformat:\"-3\" }}\r\n\r\n34\r\n\r\n34.26000\r\n\r\n{{ value|floatformat:\"-3\" }}\r\n\r\n34.260\r\n\r\nIf the argument passed to floatformat has the g suffix, it will force grouping by the THOUSAND_SEPARATOR for the active locale. For example, when the active locale is en (English):\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34232.34\r\n\r\n{{ value|floatformat:\"2g\" }}\r\n\r\n34,232.34\r\n\r\n34232.06\r\n\r\n{{ value|floatformat:\"g\" }}\r\n\r\n34,232.1\r\n\r\n34232.00\r\n\r\n{{ value|floatformat:\"-3g\" }}\r\n\r\n34,232\r\n\r\nOutput is always localized (independently of the {% localize off %} tag) unless the argument passed to floatformat has the u suffix, which will force disabling localization. For example, when the active locale is pl (Polish):\r\n\r\nvalue\r\n\r\nTemplate\r\n\r\nOutput\r\n\r\n34.23234\r\n\r\n{{ value|floatformat:\"3\" }}\r\n\r\n34,232\r\n\r\n34.23234\r\n\r\n{{ value|floatformat:\"3u\" }}\r\n\r\n34.232\r\n\r\nUsing floatformat with no argument is equivalent to using floatformat with an argument of -1.\r\n\r\nforce_escape¶\r\nApplies HTML escaping to a string (see the escape filter for details). This filter is applied immediately and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the escape filter.\r\n\r\nFor example, if you want to catch the <p> HTML elements created by the linebreaks filter:\r\n\r\n{% autoescape off %}\r\n    {{ body|linebreaks|force_escape }}\r\n{% endautoescape %}\r\nget_digit¶\r\nGiven a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.\r\n\r\nFor example:\r\n\r\n{{ value|get_digit:\"2\" }}\r\nIf value is 123456789, the output will be 8.\r\n\r\niriencode¶\r\nConverts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you’re trying to use strings containing non-ASCII characters in a URL.\r\n\r\nIt’s safe to use this filter on a string that has already gone through the urlencode filter.\r\n\r\nFor example:\r\n\r\n{{ value|iriencode }}\r\nIf value is \"?test=I ♥ Django\", the output will be \"?test=I%20%E2%99%A5%20Django\".\r\n\r\njoin¶\r\nJoins a list with a string, like Python’s str.join(list)\r\n\r\nFor example:\r\n\r\n{{ value|join:\" // \" }}\r\nIf value is the list ['a', 'b', 'c'], the output will be the string \"a // b // c\".\r\n\r\njson_script¶\r\nSafely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript.\r\n\r\nArgument: The optional HTML “id” of the <script> tag.\r\n\r\nFor example:\r\n\r\n{{ value|json_script:\"hello-data\" }}\r\nIf value is the dictionary {'hello': 'world'}, the output will be:\r\n\r\n<script id=\"hello-data\" type=\"application/json\">{\"hello\": \"world\"}</script>\r\nThe resulting data can be accessed in JavaScript like this:\r\n\r\nconst value = JSON.parse(document.getElementById('hello-data').textContent);\r\nXSS attacks are mitigated by escaping the characters “<”, “>” and “&”. For example if value is {'hello': 'world</script>&amp;'}, the output is:\r\n\r\n<script id=\"hello-data\" type=\"application/json\">{\"hello\": \"world\\\\u003C/script\\\\u003E\\\\u0026amp;\"}</script>\r\nThis is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.\r\n\r\nlast¶\r\nReturns the last item in a list.\r\n\r\nFor example:\r\n\r\n{{ value|last }}\r\nIf value is the list ['a', 'b', 'c', 'd'], the output will be the string \"d\".\r\n\r\nlength¶\r\nReturns the length of the value. This works for both strings and lists.\r\n\r\nFor example:\r\n\r\n{{ value|length }}\r\nIf value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be 4.\r\n\r\nThe filter returns 0 for an undefined variable.\r\n\r\nlinebreaks¶\r\nReplaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (<br>) and a new line followed by a blank line becomes a paragraph break (</p>).\r\n\r\nFor example:\r\n\r\n{{ value|linebreaks }}\r\nIf value is Joel\\nis a slug, the output will be <p>Joel<br>is a slug</p>.\r\n\r\nlinebreaksbr¶\r\nConverts all newlines in a piece of plain text to HTML line breaks (<br>).\r\n\r\nFor example:\r\n\r\n{{ value|linebreaksbr }}\r\nIf value is Joel\\nis a slug, the output will be Joel<br>is a slug.\r\n\r\nlinenumbers¶\r\nDisplays text with line numbers.\r\n\r\nFor example:\r\n\r\n{{ value|linenumbers }}\r\nIf value is:\r\n\r\none\r\ntwo\r\nthree\r\nthe output will be:\r\n\r\n1. one\r\n2. two\r\n3. three\r\nljust¶\r\nLeft-aligns the value in a field of a given width.\r\n\r\nArgument: field size\r\n\r\nFor example:\r\n\r\n\"{{ value|ljust:\"10\" }}\"\r\nIf value is Django, the output will be \"Django    \".\r\n\r\nlower¶\r\nConverts a string into all lowercase.\r\n\r\nFor example:\r\n\r\n{{ value|lower }}\r\nIf value is Totally LOVING this Album!, the output will be totally loving this album!.\r\n\r\nmake_list¶\r\nReturns the value turned into a list. For a string, it’s a list of characters. For an integer, the argument is cast to a string before creating a list.\r\n\r\nFor example:\r\n\r\n{{ value|make_list }}\r\nIf value is the string \"Joel\", the output would be the list ['J', 'o', 'e', 'l']. If value is 123, the output will be the list ['1', '2', '3'].\r\n\r\nphone2numeric¶\r\nConverts a phone number (possibly containing letters) to its numerical equivalent.\r\n\r\nThe input doesn’t have to be a valid phone number. This will happily convert any string.\r\n\r\nFor example:\r\n\r\n{{ value|phone2numeric }}\r\nIf value is 800-COLLECT, the output will be 800-2655328.\r\n\r\npluralize¶\r\nReturns a plural suffix if the value is not 1, '1', or an object of length 1. By default, this suffix is 's'.\r\n\r\nExample:\r\n\r\nYou have {{ num_messages }} message{{ num_messages|pluralize }}.\r\nIf num_messages is 1, the output will be You have 1 message. If num_messages is 2 the output will be You have 2 messages.\r\n\r\nFor words that require a suffix other than 's', you can provide an alternate suffix as a parameter to the filter.\r\n\r\nExample:\r\n\r\nYou have {{ num_walruses }} walrus{{ num_walruses|pluralize:\"es\" }}.\r\nFor words that don’t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma.\r\n\r\nExample:\r\n\r\nYou have {{ num_cherries }} cherr{{ num_cherries|pluralize:\"y,ies\" }}.\r\nNote\r\n\r\nUse blocktranslate to pluralize translated strings.\r\n\r\npprint¶\r\nA wrapper around pprint.pprint() – for debugging, really.\r\n\r\nrandom¶\r\nReturns a random item from the given list.\r\n\r\nFor example:\r\n\r\n{{ value|random }}\r\nIf value is the list ['a', 'b', 'c', 'd'], the output could be \"b\".\r\n\r\nrjust¶\r\nRight-aligns the value in a field of a given width.\r\n\r\nArgument: field size\r\n\r\nFor example:\r\n\r\n\"{{ value|rjust:\"10\" }}\"\r\nIf value is Django, the output will be \"    Django\".\r\n\r\nsafe¶\r\nMarks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.\r\n\r\nNote\r\n\r\nIf you are chaining filters, a filter applied after safe can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:\r\n\r\n{{ var|safe|escape }}\r\nsafeseq¶\r\nApplies the safe filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as join. For example:\r\n\r\n{{ some_list|safeseq|join:\", \" }}\r\nYou couldn’t use the safe filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence.\r\n\r\nslice¶\r\nReturns a slice of the list.\r\n\r\nUses the same syntax as Python’s list slicing. See the Python documentation for an introduction.\r\n\r\nExample:\r\n\r\n{{ some_list|slice:\":2\" }}\r\nIf some_list is ['a', 'b', 'c'], the output will be ['a', 'b'].\r\n\r\nslugify¶\r\nConverts to ASCII. Converts spaces to hyphens. Removes characters that aren’t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace.\r\n\r\nFor example:\r\n\r\n{{ value|slugify }}\r\nIf value is \"Joel is a slug\", the output will be \"joel-is-a-slug\".\r\n\r\nstringformat¶\r\nFormats the variable according to the argument, a string formatting specifier. This specifier uses the printf-style String Formatting syntax, with the exception that the leading “%” is dropped.\r\n\r\nFor example:\r\n\r\n{{ value|stringformat:\"E\" }}\r\nIf value is 10, the output will be 1.000000E+01.\r\n\r\nstriptags¶\r\nMakes all possible efforts to strip all [X]HTML tags.\r\n\r\nFor example:\r\n\r\n{{ value|striptags }}\r\nIf value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\", the output will be \"Joel is a slug\".\r\n\r\nNo safety guarantee\r\n\r\nNote that striptags doesn’t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So NEVER apply the safe filter to a striptags output. If you are looking for something more robust, consider using a third-party HTML sanitizing tool.\r\n\r\ntime¶\r\nFormats a time according to the given format.\r\n\r\nGiven format can be the predefined one TIME_FORMAT, or a custom format, same as the date filter. Note that the predefined format is locale-dependent.\r\n\r\nFor example:\r\n\r\n{{ value|time:\"H:i\" }}\r\nIf value is equivalent to datetime.datetime.now(), the output will be the string \"01:23\".\r\n\r\nNote that you can backslash-escape a format string if you want to use the “raw” value. In this example, both “h” and “m” are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively:\r\n\r\n{{ value|time:\"H\\h i\\m\" }}\r\nThis would display as “01h 23m”.\r\n\r\nAnother example:\r\n\r\nAssuming that LANGUAGE_CODE is, for example, \"de\", then for:\r\n\r\n{{ value|time:\"TIME_FORMAT\" }}\r\nthe output will be the string \"01:23\" (The \"TIME_FORMAT\" format specifier for the de locale as shipped with Django is \"H:i\").\r\n\r\nThe time filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a date value, use the date filter instead (or along with time if you need to render a full datetime value).\r\n\r\nThere is one exception the above rule: When passed a datetime value with attached timezone information (a time-zone-aware datetime instance) the time filter will accept the timezone-related format specifiers 'e', 'O' , 'T' and 'Z'.\r\n\r\nWhen used without a format string, the TIME_FORMAT format specifier is used:\r\n\r\n{{ value|time }}\r\nis the same as:\r\n\r\n{{ value|time:\"TIME_FORMAT\" }}\r\ntimesince¶\r\nFormats a date as the time since that date (e.g., “4 days, 6 hours”).\r\n\r\nTakes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is now). For example, if blog_date is a date instance representing midnight on 1 June 2006, and comment_date is a date instance for 08:00 on 1 June 2006, then the following would return “8 hours”:\r\n\r\n{{ blog_date|timesince:comment_date }}\r\nComparing offset-naive and offset-aware datetimes will return an empty string.\r\n\r\nMinutes is the smallest unit used, and “0 minutes” will be returned for any date that is in the future relative to the comparison point.\r\n\r\ntimeuntil¶\r\nSimilar to timesince, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and conference_date is a date instance holding 29 June 2006, then {{ conference_date|timeuntil }} will return “4 weeks”.\r\n\r\nTakes an optional argument that is a variable containing the date to use as the comparison point (instead of now). If from_date contains 22 June 2006, then the following will return “1 week”:\r\n\r\n{{ conference_date|timeuntil:from_date }}\r\nComparing offset-naive and offset-aware datetimes will return an empty string.\r\n\r\nMinutes is the smallest unit used, and “0 minutes” will be returned for any date that is in the past relative to the comparison point.\r\n\r\ntitle¶\r\nConverts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase. This tag makes no effort to keep “trivial words” in lowercase.\r\n\r\nFor example:\r\n\r\n{{ value|title }}\r\nIf value is \"my FIRST post\", the output will be \"My First Post\".\r\n\r\ntruncatechars¶\r\nTruncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (”…”).\r\n\r\nArgument: Number of characters to truncate to\r\n\r\nFor example:\r\n\r\n{{ value|truncatechars:7 }}\r\nIf value is \"Joel is a slug\", the output will be \"Joel i…\".\r\n\r\ntruncatechars_html¶\r\nSimilar to truncatechars, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation.\r\n\r\nFor example:\r\n\r\n{{ value|truncatechars_html:7 }}\r\nIf value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel i…</p>\".\r\n\r\nNewlines in the HTML content will be preserved.\r\n\r\nSize of input string\r\n\r\nProcessing large, potentially malformed HTML strings can be resource-intensive and impact service performance. truncatechars_html limits input to the first five million characters.\r\n\r\nChanged in Django 3.2.22:\r\nIn older versions, strings over five million characters were processed.\r\n\r\ntruncatewords¶\r\nTruncates a string after a certain number of words.\r\n\r\nArgument: Number of words to truncate after\r\n\r\nFor example:\r\n\r\n{{ value|truncatewords:2 }}\r\nIf value is \"Joel is a slug\", the output will be \"Joel is …\".\r\n\r\nNewlines within the string will be removed.\r\n\r\ntruncatewords_html¶\r\nSimilar to truncatewords, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation.\r\n\r\nThis is less efficient than truncatewords, so should only be used when it is being passed HTML text.\r\n\r\nFor example:\r\n\r\n{{ value|truncatewords_html:2 }}\r\nIf value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel is …</p>\".\r\n\r\nNewlines in the HTML content will be preserved.\r\n\r\nSize of input string\r\n\r\nProcessing large, potentially malformed HTML strings can be resource-intensive and impact service performance. truncatewords_html limits input to the first five million characters.\r\n\r\nChanged in Django 3.2.22:\r\nIn older versions, strings over five million characters were processed.\r\n\r\nunordered_list¶\r\nRecursively takes a self-nested list and returns an HTML unordered list – WITHOUT opening and closing <ul> tags.\r\n\r\nThe list is assumed to be in the proper format. For example, if var contains ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']], then {{ var|unordered_list }} would return:\r\n\r\n<li>States\r\n<ul>\r\n        <li>Kansas\r\n        <ul>\r\n                <li>Lawrence</li>\r\n                <li>Topeka</li>\r\n        </ul>\r\n        </li>\r\n        <li>Illinois</li>\r\n</ul>\r\n</li>\r\nupper¶\r\nConverts a string into all uppercase.\r\n\r\nFor example:\r\n\r\n{{ value|upper }}\r\nIf value is \"Joel is a slug\", the output will be \"JOEL IS A SLUG\".\r\n\r\nurlencode¶\r\nEscapes a value for use in a URL.\r\n\r\nFor example:\r\n\r\n{{ value|urlencode }}\r\nIf value is \"https://www.example.org/foo?a=b&c=d\", the output will be \"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\".\r\n\r\nAn optional argument containing the characters which should not be escaped can be provided.\r\n\r\nIf not provided, the ‘/’ character is assumed safe. An empty string can be provided when all characters should be escaped. For example:\r\n\r\n{{ value|urlencode:\"\" }}\r\nIf value is \"https://www.example.org/\", the output will be \"https%3A%2F%2Fwww.example.org%2F\".\r\n\r\nurlize¶\r\nConverts URLs and email addresses in text into clickable links.\r\n\r\nThis template tag works on links prefixed with http://, https://, or www.. For example, https://djangocon.eu will get converted but djangocon.eu won’t.\r\n\r\nIt also supports domain-only links ending in one of the original top level domains (.com, .edu, .gov, .int, .mil, .net, and .org). For example, djangoproject.com gets converted.\r\n\r\nLinks can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and urlize will still do the right thing.\r\n\r\nLinks generated by urlize have a rel=\"nofollow\" attribute added to them.\r\n\r\nFor example:\r\n\r\n{{ value|urlize }}\r\nIf value is \"Check out www.djangoproject.com\", the output will be \"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\".\r\n\r\nIn addition to web links, urlize also converts email addresses into mailto: links. If value is \"Send questions to foo@example.com\", the output will be \"Send questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\".\r\n\r\nThe urlize filter also takes an optional parameter autoescape. If autoescape is True, the link text and URLs will be escaped using Django’s built-in escape filter. The default value for autoescape is True.\r\n\r\nNote\r\n\r\nIf urlize is applied to text that already contains HTML markup, or to email addresses that contain single quotes ('), things won’t work as expected. Apply this filter only to plain text.\r\n\r\nurlizetrunc¶\r\nConverts URLs and email addresses into clickable links just like urlize, but truncates URLs longer than the given character limit.\r\n\r\nArgument: Number of characters that link text should be truncated to, including the ellipsis that’s added if truncation is necessary.\r\n\r\nFor example:\r\n\r\n{{ value|urlizetrunc:15 }}\r\nIf value is \"Check out www.djangoproject.com\", the output would be 'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproj…</a>'.\r\n\r\nAs with urlize, this filter should only be applied to plain text.\r\n\r\nwordcount¶\r\nReturns the number of words.\r\n\r\nFor example:\r\n\r\n{{ value|wordcount }}\r\nIf value is \"Joel is a slug\", the output will be 4.\r\n\r\nwordwrap¶\r\nWraps words at specified line length.\r\n\r\nArgument: number of characters at which to wrap the text\r\n\r\nFor example:\r\n\r\n{{ value|wordwrap:5 }}\r\nIf value is Joel is a slug, the output would be:\r\n\r\nJoel\r\nis a\r\nslug\r\nyesno¶\r\nMaps values for True, False, and (optionally) None, to the strings “yes”, “no”, “maybe”, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:\r\n\r\nFor example:\r\n\r\n{{ value|yesno:\"yeah,no,maybe\" }}\r\nValue\r\n\r\nArgument\r\n\r\nOutputs\r\n\r\nTrue\r\n\r\nyes\r\n\r\nTrue\r\n\r\n\"yeah,no,maybe\"\r\n\r\nyeah\r\n\r\nFalse\r\n\r\n\"yeah,no,maybe\"\r\n\r\nno\r\n\r\nNone\r\n\r\n\"yeah,no,maybe\"\r\n\r\nmaybe\r\n\r\nNone\r\n\r\n\"yeah,no\"\r\n\r\nno (converts None to False if no mapping for None is given)\r\n\r\nInternationalization tags and filters¶\r\nDjango provides template tags and filters to control each aspect of internationalization in templates. They allow for granular control of translations, formatting, and time zone conversions.\r\n\r\ni18n¶\r\nThis library allows specifying translatable text in templates. To enable it, set USE_I18N to True, then load it with {% load i18n %}.\r\n\r\nSee Internationalization: in template code.\r\n\r\nl10n¶\r\nThis library provides control over the localization of values in templates. You only need to load the library using {% load l10n %}.\r\n\r\nSee Controlling localization in templates.\r\n\r\ntz¶\r\nThis library provides control over time zone conversions in templates. Like l10n, you only need to load the library using {% load tz %}, but you’ll usually also set USE_TZ to True so that conversion to local time happens by default.\r\n\r\nSee Time zone aware output in templates.\r\n\r\nOther tags and filters libraries¶\r\nDjango comes with a couple of other template-tag libraries that you have to enable explicitly in your INSTALLED_APPS setting and enable in your template with the {% load %} tag.\r\n\r\ndjango.contrib.humanize¶\r\nA set of Django template filters useful for adding a “human touch” to data. See django.contrib.humanize.\r\n\r\nstatic¶\r\nstatic¶\r\nTo link to static files that are saved in STATIC_ROOT Django ships with a static template tag. If the django.contrib.staticfiles app is installed, the tag will serve files using url() method of the storage specified by staticfiles in STORAGES. For example:\r\n\r\n{% load static %}\r\n<img src=\"{% static 'images/hi.jpg' %}\" alt=\"Hi!\">\r\nIt is also able to consume standard context variables, e.g. assuming a user_stylesheet variable is passed to the template:\r\n\r\n{% load static %}\r\n<link rel=\"stylesheet\" href=\"{% static user_stylesheet %}\" media=\"screen\">\r\nIf you’d like to retrieve a static URL without displaying it, you can use a slightly different call:\r\n\r\n{% load static %}\r\n{% static \"images/hi.jpg\" as myphoto %}\r\n<img src=\"{{ myphoto }}\" alt=\"Hi!\">\r\nUsing Jinja2 templates?\r\n\r\nSee Jinja2 for information on using the static tag with Jinja2.\r\n\r\nget_static_prefix¶\r\nYou should prefer the static template tag, but if you need more control over exactly where and how STATIC_URL is injected into the template, you can use the get_static_prefix template tag:\r\n\r\n{% load static %}\r\n<img src=\"{% get_static_prefix %}images/hi.jpg\" alt=\"Hi!\">\r\nThere’s also a second form you can use to avoid extra processing if you need the value multiple times:\r\n\r\n{% load static %}\r\n{% get_static_prefix as STATIC_PREFIX %}\r\n\r\n<img src=\"{{ STATIC_PREFIX }}images/hi.jpg\" alt=\"Hi!\">\r\n<img src=\"{{ STATIC_PREFIX }}images/hi2.jpg\" alt=\"Hello!\">\r\nget_media_prefix¶\r\nSimilar to the get_static_prefix, get_media_prefix populates a template variable with the media prefix MEDIA_URL, e.g.:\r\n\r\n{% load static %}\r\n<body data-media-url=\"{% get_media_prefix %}\">\r\nBy storing the value in a data attribute, we ensure it’s escaped appropriately if we want to use it in a JavaScript context.\r\n\r\nPrevious page and next page The Django template languageThe Django template language: for Python programmers \r\nAdditional Information\r\nSupport Django!\r\nSupport Django!\r\nTHE PADDING donated to the Django Software Foundation to support Django development. Donate today!\r\nContents\r\nBuilt-in template tags and filters\r\nBuilt-in tag reference\r\nautoescape\r\nblock\r\ncomment\r\ncsrf_token\r\ncycle\r\ndebug\r\nextends\r\nfilter\r\nfirstof\r\nfor\r\nfor … empty\r\nif\r\nBoolean operators\r\n== operator\r\n!= operator\r\n< operator\r\n> operator\r\n<= operator\r\n>= operator\r\nin operator\r\nnot in operator\r\nis operator\r\nis not operator\r\nFilters\r\nComplex expressions\r\nifchanged\r\ninclude\r\nload\r\nlorem\r\nnow\r\nquerystring\r\nBasic usage\r\nCustom QueryDict\r\nSetting items\r\nRemoving items\r\nHandling lists\r\nDynamic usage\r\nregroup\r\nGrouping on other properties\r\nresetcycle\r\nspaceless\r\ntemplatetag\r\nurl\r\nverbatim\r\nwidthratio\r\nwith\r\nBuilt-in filter reference\r\nadd\r\naddslashes\r\ncapfirst\r\ncenter\r\ncut\r\ndate\r\ndefault\r\ndefault_if_none\r\ndictsort\r\ndictsortreversed\r\ndivisibleby\r\nescape\r\nescapejs\r\nescapeseq\r\nfilesizeformat\r\nfirst\r\nfloatformat\r\nforce_escape\r\nget_digit\r\niriencode\r\njoin\r\njson_script\r\nlast\r\nlength\r\nlinebreaks\r\nlinebreaksbr\r\nlinenumbers\r\nljust\r\nlower\r\nmake_list\r\nphone2numeric\r\npluralize\r\npprint\r\nrandom\r\nrjust\r\nsafe\r\nsafeseq\r\nslice\r\nslugify\r\nstringformat\r\nstriptags\r\ntime\r\ntimesince\r\ntimeuntil\r\ntitle\r\ntruncatechars\r\ntruncatechars_html\r\ntruncatewords\r\ntruncatewords_html\r\nunordered_list\r\nupper\r\nurlencode\r\nurlize\r\nurlizetrunc\r\nwordcount\r\nwordwrap\r\nyesno\r\nInternationalization tags and filters\r\ni18n\r\nl10n\r\ntz\r\nOther tags and filters libraries\r\ndjango.contrib.humanize\r\nstatic\r\nstatic\r\nget_static_prefix\r\nget_media_prefix\r\nBrowse\r\nPrev: The Django template language\r\nNext: The Django template language: for Python programmers\r\nTable of contents\r\nGeneral Index\r\nPython Module Index\r\nYou are here:\r\nDjango 5.1 documentation\r\nAPI Reference\r\nTemplates\r\nBuilt-in template tags and filters\r\nGetting help\r\nFAQ\r\nTry the FAQ — it's got answers to many common questions.\r\nIndex, Module Index, or Table of Contents\r\nHandy when looking for specific information.\r\nDjango Discord Server\r\nJoin the Django Discord Community.\r\nOfficial Django Forum\r\nJoin the community on the Django Forum.\r\nTicket tracker\r\nReport bugs with Django or Django documentation in our ticket tracker.\r\nDownload:\r\nOffline (Django 5.1): HTML | PDF | ePub\r\nProvided by Read the Docs.", "tags": [1]}}, {"model": "blango_auth.user", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$alNoZGpSVGhrMm1sOTRaSDdqNVJ1SQ$1IPwn3OlfIifDdkuFfgkLXpHZolD2dzWBeIzxf5C3dY", "last_login": null, "is_superuser": false, "username": "user01", "first_name": "pepito", "last_name": "perez", "email": "pepito@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2025-04-03T14:26:39Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.user", "pk": 2, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$Y2JNM2RQSjRXbkhQY1lxMnBoOHY0cw$i4MViiiXJphF/OS5IrEI3w", "last_login": "2025-04-14T18:33:43.574Z", "is_superuser": true, "username": "admin01", "first_name": "Daniel", "last_name": "Sierra", "email": "", "is_staff": true, "is_active": true, "date_joined": "2025-04-03T21:54:16Z", "groups": [], "user_permissions": []}}]